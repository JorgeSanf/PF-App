import { Container, TypographyStylesProvider } from "@mantine/core";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { Doc } from "../../types/Doc";

export default function Documento({ doc }: { doc: Doc }) {
  const router = useRouter();
  const { id } = router.query;
  const [html, setHtml] = useState<any>();

  useEffect(() => {
    //fetch(doc.enlace).then((response) => ;
    const recuperarHTML = async () => {
      const resp = await fetch(doc.enlace);
      resp.text().then((text) => {
        setHtml(text);
      });
    };
    recuperarHTML();
  }, []);

  return (
    <Container size="lg" style={{ marginLeft: "5%", marginBottom: "5%" }}>
      <div
        style={{
          marginLeft: "5%",
          marginTop: "2%",
          borderBottom: "1px solid #00b4b4",
          //borderRadius: "10px",
          padding: "2%",
          width: "80%",
        }}
      >
        <div style={{ float: "left", marginRight: "3%" }}>
          <Image
            height={"100%"}
            width={"100%"}
            src={srcImg}
            alt={docu.doc.tema}
          />
        </div>
        <Title order={6} style={{ color: "#00b4b4", marginBottom: "0%" }}>
          {docu.doc.tema.toUpperCase()}
        </Title>
        <Title
          order={1}
          style={{ marginTop: "0%", marginBottom: "0.5%", color: "#005555" }}
        >
          {docu.doc.titulo}
        </Title>
        <Title order={5} style={{ color: "#58b8b8" }}>
          {docu.doc.autor}
        </Title>
      </div>
      <br />
      <TypographyStylesProvider>
        <div dangerouslySetInnerHTML={{ __html: docu.html }} />
      </TypographyStylesProvider>
    </Container>
  );
}

/*export async function getStaticPaths() {
  // Call an external API endpoint to get posts
  const res = await fetch("https://pf-api-sp.azurewebsites.net/docus/api");
  const documentos = await res.json();

  // Get the paths we want to pre-render based on posts
  const paths = documentos.map((doc: Doc) => ({
    params: { id: doc.id },
  }));

  // We'll pre-render only these paths at build time.
  // { fallback: false } means other routes should 404.
  return { paths, fallback: false };
}

export async function getStaticProps({ params }: any) {
*/

export async function getServerSideProps({ params }: any) {
  const req = await fetch(
    `https://pf-api-sp.azurewebsites.net/docus/api/id/${params.id}`
  );
  const data = await req.json();

  return {
    props: { doc: data },
  };
}
